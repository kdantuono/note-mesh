version: '3.8'

services:
  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: notemesh-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-notemesh}
      POSTGRES_USER: ${POSTGRES_USER:-notemesh}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-notemesh} -d ${POSTGRES_DB:-notemesh}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - notemesh-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: notemesh-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    networks:
      - notemesh-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend FastAPI application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: notemesh-backend-prod
    environment:
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-notemesh}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}@postgres:5432/${POSTGRES_DB:-notemesh}
      - REDIS_URL=redis://:${REDIS_PASSWORD:?REDIS_PASSWORD is required}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:?SECRET_KEY is required}
      - CORS_ORIGINS=${CORS_ORIGINS:-["https://yourdomain.com"]}
      - CORS_ALLOW_CREDENTIALS=true
      - RELOAD=false
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        python -m alembic upgrade head &&
        echo 'Starting production server...' &&
        gunicorn notemesh.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 --access-logfile - --error-logfile - --log-level info
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    networks:
      - notemesh-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Frontend nginx server with production optimizations
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: notemesh-frontend-prod
    volumes:
      - ./docker/nginx/default.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    environment:
      - API_BASE_URL=${API_BASE_URL:-http://backend:8000}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 30s
    networks:
      - notemesh-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse proxy (production only)
  nginx:
    image: nginx:1.24-alpine
    container_name: notemesh-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/proxy.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./docker/logs/nginx:/var/log/nginx
    depends_on:
      - frontend
    environment:
      - DOMAIN=${DOMAIN:-localhost}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - notemesh-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  notemesh-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16