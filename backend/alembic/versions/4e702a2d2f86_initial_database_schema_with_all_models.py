"""Initial database schema with all models

Revision ID: 4e702a2d2f86
Revises: 
Create Date: 2025-09-14 01:56:53.661040

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID, ARRAY

# revision identifiers, used by Alembic.
revision: str = '4e702a2d2f86'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema for PostgreSQL."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('id', UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_index('idx_users_active', 'users', ['is_active'], unique=False)
    op.create_index('idx_users_username', 'users', ['username'], unique=False)
    op.create_table('notes',
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('hyperlinks', ARRAY(sa.String(length=500)), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('last_viewed_at', sa.DateTime(), nullable=True),
    sa.Column('owner_id', UUID(as_uuid=True), nullable=False),
    sa.Column('id', UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_notes_content_fts', 'notes', ['content'], unique=False)
    op.create_index('idx_notes_created_at', 'notes', ['created_at'], unique=False)
    op.create_index('idx_notes_owner_created', 'notes', ['owner_id', 'created_at'], unique=False)
    op.create_index('idx_notes_owner_id', 'notes', ['owner_id'], unique=False)
    op.create_index('idx_notes_owner_view_count', 'notes', ['owner_id', 'view_count'], unique=False)
    op.create_index('idx_notes_title_fts', 'notes', ['title'], unique=False)
    op.create_index('idx_notes_view_count', 'notes', ['view_count'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('user_id', UUID(as_uuid=True), nullable=False),
    sa.Column('device_identifier', sa.String(length=255), nullable=True),
    sa.Column('token_family_id', UUID(as_uuid=True), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_from_ip', sa.String(length=45), nullable=True),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revocation_reason', sa.String(length=100), nullable=True),
    sa.Column('id', UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_index('idx_refresh_tokens_expires_at', 'refresh_tokens', ['expires_at'], unique=False)
    op.create_index('idx_refresh_tokens_is_active', 'refresh_tokens', ['is_active'], unique=False)
    op.create_index('idx_refresh_tokens_token', 'refresh_tokens', ['token'], unique=False)
    op.create_index('idx_refresh_tokens_user_active', 'refresh_tokens', ['user_id', 'is_active'], unique=False)
    op.create_index('idx_refresh_tokens_user_id', 'refresh_tokens', ['user_id'], unique=False)
    op.create_table('tags',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('color', sa.String(length=7), nullable=True),
    sa.Column('created_by_user_id', UUID(as_uuid=True), nullable=True),
    sa.Column('id', UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_tags_name')
    )
    op.create_index('idx_tags_created_by', 'tags', ['created_by_user_id'], unique=False)
    op.create_index('idx_tags_name', 'tags', ['name'], unique=False)
    op.create_index('idx_tags_usage_count', 'tags', ['usage_count'], unique=False)
    op.create_table('note_tags',
    sa.Column('note_id', UUID(as_uuid=True), nullable=False),
    sa.Column('tag_id', UUID(as_uuid=True), nullable=False),
    sa.Column('tagged_by_user_id', UUID(as_uuid=True), nullable=True),
    sa.Column('tagged_at', sa.DateTime(), nullable=False),
    sa.Column('id', UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['notes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tagged_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('note_id', 'tag_id', name='uq_note_tags_note_tag')
    )
    op.create_index('idx_note_tags_note_id', 'note_tags', ['note_id'], unique=False)
    op.create_index('idx_note_tags_tag_id', 'note_tags', ['tag_id'], unique=False)
    op.create_index('idx_note_tags_user_id', 'note_tags', ['tagged_by_user_id'], unique=False)
    op.create_table('shares',
    sa.Column('note_id', UUID(as_uuid=True), nullable=False),
    sa.Column('shared_by_user_id', UUID(as_uuid=True), nullable=False),
    sa.Column('shared_with_user_id', UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('shared_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('access_count', sa.Integer(), nullable=False),
    sa.Column('share_message', sa.String(length=500), nullable=True),
    sa.Column('id', UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['note_id'], ['notes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shared_by_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shared_with_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('note_id', 'shared_with_user_id', name='uq_shares_note_recipient')
    )
    op.create_index('idx_shares_note_id', 'shares', ['note_id'], unique=False)
    op.create_index('idx_shares_shared_by', 'shares', ['shared_by_user_id'], unique=False)
    op.create_index('idx_shares_shared_with', 'shares', ['shared_with_user_id'], unique=False)
    op.create_index('idx_shares_status', 'shares', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_shares_status', table_name='shares')
    op.drop_index('idx_shares_shared_with', table_name='shares')
    op.drop_index('idx_shares_shared_by', table_name='shares')
    op.drop_index('idx_shares_note_id', table_name='shares')
    op.drop_table('shares')
    op.drop_index('idx_note_tags_user_id', table_name='note_tags')
    op.drop_index('idx_note_tags_tag_id', table_name='note_tags')
    op.drop_index('idx_note_tags_note_id', table_name='note_tags')
    op.drop_table('note_tags')
    op.drop_index('idx_tags_usage_count', table_name='tags')
    op.drop_index('idx_tags_name', table_name='tags')
    op.drop_index('idx_tags_created_by', table_name='tags')
    op.drop_table('tags')
    op.drop_index('idx_refresh_tokens_user_id', table_name='refresh_tokens')
    op.drop_index('idx_refresh_tokens_user_active', table_name='refresh_tokens')
    op.drop_index('idx_refresh_tokens_token', table_name='refresh_tokens')
    op.drop_index('idx_refresh_tokens_is_active', table_name='refresh_tokens')
    op.drop_index('idx_refresh_tokens_expires_at', table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index('idx_notes_view_count', table_name='notes')
    op.drop_index('idx_notes_title_fts', table_name='notes')
    op.drop_index('idx_notes_owner_view_count', table_name='notes')
    op.drop_index('idx_notes_owner_id', table_name='notes')
    op.drop_index('idx_notes_owner_created', table_name='notes')
    op.drop_index('idx_notes_created_at', table_name='notes')
    op.drop_index('idx_notes_content_fts', table_name='notes')
    op.drop_table('notes')
    op.drop_index('idx_users_username', table_name='users')
    op.drop_index('idx_users_active', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
