name: CI

on:
  push:
    branches: [ master, main, development ]
  pull_request:
    branches: [ master, main, development ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    env:
      NOTEMESH_SKIP_LIFESPAN_DB: "1"
      PYTHONPATH: backend/src

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            backend/requirements.txt
            backend/requirements-dev.txt

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        working-directory: backend
        run: pytest -vv -ra --durations=10

      - name: Generate coverage XML
        if: ${{ always() && hashFiles('backend/.coverage') != '' }}
        working-directory: backend
        run: |
          python -m coverage xml -i -o coverage.xml

      - name: Coverage summary (job summary)
        if: ${{ always() && hashFiles('backend/coverage.xml') != '' }}
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: backend/coverage.xml
          badge: true
          format: markdown
          output: file

      - name: Append coverage summary to job
        if: ${{ always() && hashFiles('code-coverage-results.md') != '' }}
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: backend/htmlcov
          if-no-files-found: ignore

      - name: Upload coverage XML
        if: ${{ always() && hashFiles('backend/coverage.xml') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: backend/coverage.xml
          if-no-files-found: ignore

      # Non-blocking quality checks (keep visible but don't fail the build initially)
      - name: Lint (flake8)
        continue-on-error: true
        working-directory: backend
        run: flake8 src/ --max-line-length=100

      - name: Format check (black)
        continue-on-error: true
        working-directory: backend
        run: black --check --line-length=100 src/ tests/

      - name: Import sorting (isort)
        continue-on-error: true
        working-directory: backend
        run: isort --profile=black --check-only src/ tests/

      - name: Type check (mypy)
        continue-on-error: true
        working-directory: backend
        run: mypy src/ --strict